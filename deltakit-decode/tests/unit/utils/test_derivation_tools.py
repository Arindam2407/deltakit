# (c) Copyright Riverlane 2020-2025.

import warnings
from pathlib import Path

import numpy as np
import numpy.testing as npt
import pytest
import stim
from deltakit_core.decoding_graphs import dem_to_decoding_graph_and_logicals
from deltakit_decode.utils._graph_circuit_helpers import parse_stim_circuit
from deltakit_decode.utils._derivation_tools import (create_correlation_matrix,
                                                     generate_expectation_data)
from pytest_lazy_fixtures import lf


REFERENCE_DATA_DIR = Path(__file__).parent.parent.parent.parent.parent / "tests" / "reference_data"


class TestDerivationTools:

    @pytest.fixture(scope="class")
    def stim_circuit(self, reference_data_dir: Path):
        return stim.Circuit.from_file(reference_data_dir / "stim" / "circuit_noisy.stim")

    @pytest.fixture(scope="class")
    def detection_events(self, reference_data_dir: Path):
        return reference_data_dir / "b801" / "detection_events.b8"

    @pytest.fixture(params=[
            [
                [[0, 1], [0], [1], []],
                {(0,): 0.5, (0, 1): 0.25, (1,): 0.5},
                2,
            ],
            [
                [[1, 2, 3], [2], [2, 3], [3],],
                {(1,): 0.25, (1, 2): 0.25, (1, 3): 0.25,
                 (2,): 0.75, (2, 3): 0.5, (3,): 0.75},
                2,
            ],
            [
                [[0, 1], [], [], [1], [2]],
                {(0,): 0.2, (0, 1): 0.2, (1,): 0.4, (2,): 0.2},
                2,
            ],
            [
                [], {}, 2,
            ],
            [
                [[0],],
                {(0,): 1},
                2,
            ],
            [
                [[0, 1, 2],],
                {(0,): 1, (1,): 1, (2,): 1, (0, 1): 1, (0, 2): 1, (1, 2): 1, (0, 1, 2): 1},
                3,
            ],
            [
                [[0, 1, 2],],
                {(0,): 1, (1,): 1, (2,): 1, (0, 1): 1, (0, 2): 1, (1, 2): 1, },
                2,
            ],
            [
                [[0, 1, 2], [0]],
                {(0,): 1, (1,): 0.5, (2,): 0.5, (0, 1): 0.5,
                 (0, 2): 0.5, (1, 2): 0.5, (0, 1, 2): 0.5},
                3,
            ],
            [
                [[0, 1, 2], [0, 1], [0]],
                {(0,): 1, (1,): 2/3, (2,): 1/3, (0, 1): 2/3,
                 (0, 2): 1/3, (1, 2): 1/3, (0, 1, 2): 1/3},
                3,
            ],
            [
                [[0, 1, 2, 3]],
                {(0,): 1.0, (1,): 1.0, (2,): 1.0, (3,): 1.0, (0, 1): 1.0, (0, 2): 1.0, (0, 3): 1.0, (1, 2): 1.0,
                 (1, 3): 1.0, (2, 3): 1.0, (0, 1, 2): 1.0, (0, 1, 3): 1.0, (0, 2, 3): 1.0, (1, 2, 3): 1.0, (0, 1, 2, 3): 1.0},
                4,
            ],
            [
                [[0, 1, 2, 3]],
                {(0,): 1.0, (1,): 1.0, (2,): 1.0, (3,): 1.0, (0, 1): 1.0, (0, 2): 1.0, (0, 3): 1.0, (1, 2): 1.0,
                 (1, 3): 1.0, (2, 3): 1.0, },
                2,
            ],
            [
                [[0, 1, 2, 3]],
                {(0,): 1.0, (1,): 1.0, (2,): 1.0, (3,): 1.0, (0, 1): 1.0, (0, 2): 1.0, (0, 3): 1.0, (1, 2): 1.0,
                 (1, 3): 1.0, (2, 3): 1.0, (0, 1, 2): 1.0, (0, 1, 3): 1.0, (0, 2, 3): 1.0, (1, 2, 3): 1.0, },
                3,
            ]])
    def expectation_value_test_data(self, request):
        return request.param

    def test_generate_expectation_data_creates_valid_data_for_lists(self, expectation_value_test_data):
        samples, expected_data, max_degree = expectation_value_test_data
        data = generate_expectation_data(samples, max_degree=max_degree)
        assert data == {frozenset(x): p for x, p in expected_data.items()}

    def test_generate_expectation_data_creates_valid_data_for_generators(self, expectation_value_test_data):
        samples, expected_data, max_degree = expectation_value_test_data
        data = generate_expectation_data((x for x in samples), max_degree=max_degree)
        assert data == {frozenset(x): p for x, p in expected_data.items()}

    @pytest.mark.parametrize(
        "samples, exp_data",
        [
            [
                [[0, 1], [0], [1], []],
                {(0,): 0.5, (0, 1): 0.25, (1,): 0.5},
            ],
            [
                [[1, 2, 3], [2], [2, 3], [3],],
                {(1,): 0.25, (1, 2): 0.25, (1, 3): 0.25,
                 (2,): 0.75, (2, 3): 0.5, (3,): 0.75},
            ],
            [
                [[0, 1], [], [], [1], [2]],
                {(0,): 0.2, (0, 1): 0.2, (1,): 0.4, (2,): 0.2},
            ],
            [
                [], {},
            ],
            [
                [[0, 1, 2], [0]],
                {(0,): 1, (1,): 0.5, (2,): 0.5, (0, 1): 0.5,
                 (0, 2): 0.5, (1, 2): 0.5, },
            ],
            [
                [[0, 1, 2], [0, 1], [0]],
                {(0,): 1, (1,): 2/3, (2,): 1/3, (0, 1): 2/3,
                 (0, 2): 1/3, (1, 2): 1/3, },
            ],
        ]
    )
    @pytest.mark.parametrize("num_processes", [-1, 1, 2, 3, 4, 5, 6])
    def test_generate_expectation_data_with_num_processes_varying(self, samples, exp_data, num_processes):
        data = generate_expectation_data(samples, num_processes=num_processes)
        assert data == {frozenset(x): p for x, p in exp_data.items()}

    @pytest.mark.parametrize(
        "samples, expected_data, only_even, only_odd",
        [
            [
                [[0], [], [1], []],
                {(0,): 0.5, (1,): 0.5},
                True,
                False,
            ],
            [
                [[0], [], [1], []],
                {},
                False,
                True,
            ],
        ]
    )
    def test_generate_expectation_data_bool_args_select_correctly(self, samples, expected_data, only_even, only_odd):
        data = generate_expectation_data(samples, only_even=only_even, only_odd=only_odd)
        assert data == {frozenset(x): p for x, p in expected_data.items()}

    @pytest.mark.parametrize(
        "samples",
        [
            [
                [],
            ],
        ]
    )
    def test_generate_expectation_data_throws_warn_if_both_bool_true(self, samples):
        with pytest.warns(UserWarning, match=r"Both only_odd and only_even are True. Selecting whole batch."):
            generate_expectation_data(samples, only_even=True, only_odd=True)

    def test_generate_expectation_data_throws_implementation_error_if_generator_passed_to_multiprocessing(self):
        with pytest.raises(NotImplementedError, match=r"Generators may only be passed in single-threaded mode. Please set num_processes=1"):
            generate_expectation_data((x for x in []), num_processes=2)

    def test_generate_expectation_data_throws_implementation_error_if_not_collection_or_generator_passed(self):
        with pytest.raises(NotImplementedError, match=r"Unrecognised argument type: <class 'list_iterator'>, argument must be a Generator or Collection."):
            generate_expectation_data(iter([]))

    # UserWarning occurs when circuit has no noise
    @pytest.mark.filterwarnings("ignore:Isolated logical observables:UserWarning")
    @pytest.mark.parametrize(
        "pij_data, circuit, expected_matrix, plot_boundary_edges",
        [
            [
                {(4, 5): 0.03790345231176562, (5, 9): 0.002868529500751227, (19, 22): 0.00026461800103988464, (0, 7): 0.005653928489673998, (20, 21): 0.03732508255785305, (20, 23): 0.03377131332412736, (10, 14): 0.008048770793723514, (13, 16): 0.029471609130065857, (0, 4): 5.837840850303477e-05, (16, 19): 0.02849572252441407, (4, 7): 0.03391940293960499, (6, 7): 0.0025136844937678204, (5, 8): 0.030405150326564157, (5, 11): 0.0017414746364182165, (8, 11): 0.027984373755002068, (0, 6): 0.0021703933982749612, (2, 6): 0.008650733655094611, (10, 11): 0.031957510864608796, (16, 17): 0.0034586936869899776, (16, 23): 0.008068947959818884, (17, 21): 0.006330654381463907, (17, 23): 0.00435744864841936, (0, 3): 0.029459473033565553, (2, 3): 0.032492004339083114, (19, 23): 0.0012011471472747615, (15, 18): 0.0266316292986451, (12, 13): 0.03852901555238519, (12, 16): 0.002805042152225601, (9, 15): 0.004175763292184775, (7, 10): 0.02996865757262679, (4, 10): 0.0023681689647790383, (8, 14): 0.002172693153775329, (14, 18): 0.00212595310063618, (16, 20): 0.0021191286955135613, (12, 19): 0.0006605574154216476, (1, 7): 0.0029128413532241715, (9, 12): 6.645559185447514e-06, (18, 19): 0.03166821612240017, (1, 5): 0.006304565824739483, (8, 15): 0.007929363945550938, (1, 4): 0.0002694083680992998, (3, 7): 0.0001230841508201852, (0, 1): 0.0033969500102377093,
                 (18, 22): 0.007292298572883826, (12, 15): 0.032676486586826314, (3, 6): 3.130775328430424e-07, (6, 10): 0.001876040683835789, (8, 9): 0.0044617889726719095, (13, 17): 0.002332912100089124, (14, 15): 0.003335912259372853, (4, 8): 0.0015633121920086701, (22, 23): 0.003070810256326939, (7, 11): 0.0008974611451682546, (11, 15): 0.0009482626326038912, (15, 19): 0.0020530644693578237, (11, 14): 0.0010592278973130531, (16, 22): 0.002235768312187414, (17, 20): 0.00016621900521496258, (9, 13): 0.006808681993422827, (12, 18): 0.001967333588214215, (8, 12): 0.0012918472336771458, (13, 19): 0.0011708642415981796, (4, 11): 0.001051769393903057, (4,): 0.04551550723348229, (5,): 0.07559024781243702, (9,): 0.073647168255709, (2,): 0.10392065331006212, (19,): 0.0475047568480284, (22,): 0.0977406913084846, (6,): 0.0952234148782009, (21,): 0.10905870200243195, (0,): 0.1174505966134559, (7,): 0.08997803071302188, (20,): 0.04800572942775009, (23,): 0.11106620112455949, (10,): 0.07287127904108855, (13,): 0.07849661480645605, (14,): 0.09386030132845684, (16,): 0.08430965094219844, (18,): 0.07574656757873897, (8,): 0.08651894856083293, (11,): 0.049722477154960955, (1,): 0.07739937962679226, (3,): 0.05251452846159589, (17,): 0.0743670462989586, (15,): 0.08694066417869489, (12,): 0.045744965556093246},                lf("stim_circuit"),
                np.array([[0.0, 5.837840850303477e-05, 0.0, 0.0, 0.0, 0.0, 0.0033969500102377093, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021703933982749612, 0.0, 0.0, 0.0, 0.0, 0.029459473033565553, 0.005653928489673998, 0.0, 0.0, 0.0, 0.0], [5.837840850303477e-05, 0.0, 0.0015633121920086701, 0.0, 0.0, 0.0, 0.0002694083680992998, 0.03790345231176562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0023681689647790383, 0.0, 0.0, 0.0, 0.0, 0.03391940293960499, 0.001051769393903057, 0.0, 0.0, 0.0], [0.0, 0.0015633121920086701, 0.0, 0.0012918472336771458, 0.0, 0.0, 0.0, 0.030405150326564157, 0.0044617889726719095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002172693153775329, 0.0, 0.0, 0.0, 0.0, 0.027984373755002068, 0.007929363945550938, 0.0, 0.0], [0.0, 0.0, 0.0012918472336771458, 0.0, 0.002805042152225601, 0.0, 0.0, 0.0, 6.645559185447514e-06, 0.03852901555238519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001967333588214215, 0.0, 0.0, 0.0, 0.0, 0.032676486586826314, 0.0006605574154216476, 0.0], [0.0, 0.0, 0.0, 0.002805042152225601, 0.0, 0.0021191286955135613, 0.0, 0.0, 0.0, 0.029471609130065857, 0.0034586936869899776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002235768312187414, 0.0, 0.0, 0.0, 0.0, 0.02849572252441407, 0.008068947959818884], [0.0, 0.0, 0.0, 0.0, 0.0021191286955135613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00016621900521496258, 0.03732508255785305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03377131332412736], [0.0033969500102377093, 0.0002694083680992998, 0.0, 0.0, 0.0, 0.0, 0.0, 0.006304565824739483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029128413532241715, 0.0, 0.0, 0.0, 0.0], [0.0, 0.03790345231176562, 0.030405150326564157, 0.0, 0.0, 0.0, 0.006304565824739483, 0.0, 0.002868529500751227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0017414746364182165, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0044617889726719095, 6.645559185447514e-06, 0.0, 0.0, 0.0, 0.002868529500751227, 0.0, 0.006808681993422827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004175763292184775, 0.0, 0.0], [0.0, 0.0, 0.0, 0.03852901555238519, 0.029471609130065857, 0.0, 0.0, 0.0, 0.006808681993422827, 0.0, 0.002332912100089124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011708642415981796, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0034586936869899776, 0.00016621900521496258, 0.0, 0.0, 0.0, 0.002332912100089124, 0.0, 0.006330654381463907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00435744864841936], [0.0, 0.0, 0.0, 0.0, 0.0, 0.03732508255785305, 0.0, 0.0, 0.0, 0.0, 0.006330654381463907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008650733655094611, 0.0, 0.0, 0.0, 0.0, 0.032492004339083114, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0021703933982749612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008650733655094611, 0.0, 0.001876040683835789, 0.0, 0.0, 0.0, 3.130775328430424e-07, 0.0025136844937678204, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0023681689647790383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001876040683835789, 0.0, 0.008048770793723514, 0.0, 0.0, 0.0, 0.02996865757262679, 0.031957510864608796, 0.0, 0.0, 0.0], [0.0, 0.0, 0.002172693153775329, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008048770793723514, 0.0, 0.00212595310063618, 0.0, 0.0, 0.0, 0.0010592278973130531, 0.003335912259372853, 0.0, 0.0], [0.0, 0.0, 0.0, 0.001967333588214215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00212595310063618, 0.0, 0.007292298572883826, 0.0, 0.0, 0.0, 0.0266316292986451, 0.03166821612240017, 0.0], [0.0, 0.0, 0.0, 0.0, 0.002235768312187414, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007292298572883826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00026461800103988464, 0.003070810256326939], [0.029459473033565553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.032492004339083114, 3.130775328430424e-07, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001230841508201852, 0.0, 0.0, 0.0, 0.0], [0.005653928489673998, 0.03391940293960499, 0.0, 0.0, 0.0, 0.0, 0.0029128413532241715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0025136844937678204, 0.02996865757262679, 0.0, 0.0, 0.0, 0.0001230841508201852, 0.0, 0.0008974611451682546, 0.0, 0.0, 0.0], [0.0, 0.001051769393903057, 0.027984373755002068, 0.0, 0.0, 0.0, 0.0, 0.0017414746364182165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.031957510864608796, 0.0010592278973130531, 0.0, 0.0, 0.0, 0.0008974611451682546, 0.0, 0.0009482626326038912, 0.0, 0.0], [0.0, 0.0, 0.007929363945550938, 0.032676486586826314, 0.0, 0.0, 0.0, 0.0, 0.004175763292184775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003335912259372853, 0.0266316292986451, 0.0, 0.0, 0.0, 0.0009482626326038912, 0.0, 0.0020530644693578237, 0.0], [0.0, 0.0, 0.0, 0.0006605574154216476, 0.02849572252441407, 0.0, 0.0, 0.0, 0.0, 0.0011708642415981796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03166821612240017, 0.00026461800103988464, 0.0, 0.0, 0.0, 0.0020530644693578237, 0.0, 0.0012011471472747615], [0.0, 0.0, 0.0, 0.0, 0.008068947959818884, 0.03377131332412736, 0.0, 0.0, 0.0, 0.0, 0.00435744864841936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003070810256326939, 0.0, 0.0, 0.0, 0.0, 0.0012011471472747615, 0.0]]),
                False,
            ],
            [
                {(4, 5): 0.03790345231176562, (5, 9): 0.002868529500751227, (19, 22): 0.00026461800103988464, (0, 7): 0.005653928489673998, (20, 21): 0.03732508255785305, (20, 23): 0.03377131332412736, (10, 14): 0.008048770793723514, (13, 16): 0.029471609130065857, (0, 4): 5.837840850303477e-05, (16, 19): 0.02849572252441407, (4, 7): 0.03391940293960499, (6, 7): 0.0025136844937678204, (5, 8): 0.030405150326564157, (5, 11): 0.0017414746364182165, (8, 11): 0.027984373755002068, (0, 6): 0.0021703933982749612, (2, 6): 0.008650733655094611, (10, 11): 0.031957510864608796, (16, 17): 0.0034586936869899776, (16, 23): 0.008068947959818884, (17, 21): 0.006330654381463907, (17, 23): 0.00435744864841936, (0, 3): 0.029459473033565553, (2, 3): 0.032492004339083114, (19, 23): 0.0012011471472747615, (15, 18): 0.0266316292986451, (12, 13): 0.03852901555238519, (12, 16): 0.002805042152225601, (9, 15): 0.004175763292184775, (7, 10): 0.02996865757262679, (4, 10): 0.0023681689647790383, (8, 14): 0.002172693153775329, (14, 18): 0.00212595310063618, (16, 20): 0.0021191286955135613, (12, 19): 0.0006605574154216476, (1, 7): 0.0029128413532241715, (9, 12): 6.645559185447514e-06, (18, 19): 0.03166821612240017, (1, 5): 0.006304565824739483, (8, 15): 0.007929363945550938, (1, 4): 0.0002694083680992998, (3, 7): 0.0001230841508201852, (0, 1): 0.0033969500102377093,
                 (18, 22): 0.007292298572883826, (12, 15): 0.032676486586826314, (3, 6): 3.130775328430424e-07, (6, 10): 0.001876040683835789, (8, 9): 0.0044617889726719095, (13, 17): 0.002332912100089124, (14, 15): 0.003335912259372853, (4, 8): 0.0015633121920086701, (22, 23): 0.003070810256326939, (7, 11): 0.0008974611451682546, (11, 15): 0.0009482626326038912, (15, 19): 0.0020530644693578237, (11, 14): 0.0010592278973130531, (16, 22): 0.002235768312187414, (17, 20): 0.00016621900521496258, (9, 13): 0.006808681993422827, (12, 18): 0.001967333588214215, (8, 12): 0.0012918472336771458, (13, 19): 0.0011708642415981796, (4, 11): 0.001051769393903057, (4,): 0.04551550723348229, (5,): 0.07559024781243702, (9,): 0.073647168255709, (2,): 0.10392065331006212, (19,): 0.0475047568480284, (22,): 0.0977406913084846, (6,): 0.0952234148782009, (21,): 0.10905870200243195, (0,): 0.1174505966134559, (7,): 0.08997803071302188, (20,): 0.04800572942775009, (23,): 0.11106620112455949, (10,): 0.07287127904108855, (13,): 0.07849661480645605, (14,): 0.09386030132845684, (16,): 0.08430965094219844, (18,): 0.07574656757873897, (8,): 0.08651894856083293, (11,): 0.049722477154960955, (1,): 0.07739937962679226, (3,): 0.05251452846159589, (17,): 0.0743670462989586, (15,): 0.08694066417869489, (12,): 0.045744965556093246},                lf("stim_circuit"),
                np.array([[0.1174505966134559, 5.837840850303477e-05, 0.0, 0.0, 0.0, 0.0, 0.0033969500102377093, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021703933982749612, 0.0, 0.0, 0.0, 0.0, 0.029459473033565553, 0.005653928489673998, 0.0, 0.0, 0.0, 0.0], [5.837840850303477e-05, 0.04551550723348229, 0.0015633121920086701, 0.0, 0.0, 0.0, 0.0002694083680992998, 0.03790345231176562, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0023681689647790383, 0.0, 0.0, 0.0, 0.0, 0.03391940293960499, 0.001051769393903057, 0.0, 0.0, 0.0], [0.0, 0.0015633121920086701, 0.08651894856083293, 0.0012918472336771458, 0.0, 0.0, 0.0, 0.030405150326564157, 0.0044617889726719095, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002172693153775329, 0.0, 0.0, 0.0, 0.0, 0.027984373755002068, 0.007929363945550938, 0.0, 0.0], [0.0, 0.0, 0.0012918472336771458, 0.045744965556093246, 0.002805042152225601, 0.0, 0.0, 0.0, 6.645559185447514e-06, 0.03852901555238519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001967333588214215, 0.0, 0.0, 0.0, 0.0, 0.032676486586826314, 0.0006605574154216476, 0.0], [0.0, 0.0, 0.0, 0.002805042152225601, 0.08430965094219844, 0.0021191286955135613, 0.0, 0.0, 0.0, 0.029471609130065857, 0.0034586936869899776, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.002235768312187414, 0.0, 0.0, 0.0, 0.0, 0.02849572252441407, 0.008068947959818884], [0.0, 0.0, 0.0, 0.0, 0.0021191286955135613, 0.04800572942775009, 0.0, 0.0, 0.0, 0.0, 0.00016621900521496258, 0.03732508255785305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03377131332412736], [0.0033969500102377093, 0.0002694083680992998, 0.0, 0.0, 0.0, 0.0, 0.07739937962679226, 0.006304565824739483, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0029128413532241715, 0.0, 0.0, 0.0, 0.0], [0.0, 0.03790345231176562, 0.030405150326564157, 0.0, 0.0, 0.0, 0.006304565824739483, 0.07559024781243702, 0.002868529500751227, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0017414746364182165, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0044617889726719095, 6.645559185447514e-06, 0.0, 0.0, 0.0, 0.002868529500751227, 0.073647168255709, 0.006808681993422827, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.004175763292184775, 0.0, 0.0], [0.0, 0.0, 0.0, 0.03852901555238519, 0.029471609130065857, 0.0, 0.0, 0.0, 0.006808681993422827, 0.07849661480645605, 0.002332912100089124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0011708642415981796, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0034586936869899776, 0.00016621900521496258, 0.0, 0.0, 0.0, 0.002332912100089124, 0.0743670462989586, 0.006330654381463907, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00435744864841936], [0.0, 0.0, 0.0, 0.0, 0.0, 0.03732508255785305, 0.0, 0.0, 0.0, 0.0, 0.006330654381463907, 0.10905870200243195, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.10392065331006212, 0.008650733655094611, 0.0, 0.0, 0.0, 0.0, 0.032492004339083114, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0021703933982749612, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008650733655094611, 0.0952234148782009, 0.001876040683835789, 0.0, 0.0, 0.0, 3.130775328430424e-07, 0.0025136844937678204, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0023681689647790383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001876040683835789, 0.07287127904108855, 0.008048770793723514, 0.0, 0.0, 0.0, 0.02996865757262679, 0.031957510864608796, 0.0, 0.0, 0.0], [0.0, 0.0, 0.002172693153775329, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.008048770793723514, 0.09386030132845684, 0.00212595310063618, 0.0, 0.0, 0.0, 0.0010592278973130531, 0.003335912259372853, 0.0, 0.0], [0.0, 0.0, 0.0, 0.001967333588214215, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00212595310063618, 0.07574656757873897, 0.007292298572883826, 0.0, 0.0, 0.0, 0.0266316292986451, 0.03166821612240017, 0.0], [0.0, 0.0, 0.0, 0.0, 0.002235768312187414, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007292298572883826, 0.0977406913084846, 0.0, 0.0, 0.0, 0.0, 0.00026461800103988464, 0.003070810256326939], [0.029459473033565553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.032492004339083114, 3.130775328430424e-07, 0.0, 0.0, 0.0, 0.0, 0.05251452846159589, 0.0001230841508201852, 0.0, 0.0, 0.0, 0.0], [0.005653928489673998, 0.03391940293960499, 0.0, 0.0, 0.0, 0.0, 0.0029128413532241715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0025136844937678204, 0.02996865757262679, 0.0, 0.0, 0.0, 0.0001230841508201852, 0.08997803071302188, 0.0008974611451682546, 0.0, 0.0, 0.0], [0.0, 0.001051769393903057, 0.027984373755002068, 0.0, 0.0, 0.0, 0.0, 0.0017414746364182165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.031957510864608796, 0.0010592278973130531, 0.0, 0.0, 0.0, 0.0008974611451682546, 0.049722477154960955, 0.0009482626326038912, 0.0, 0.0], [0.0, 0.0, 0.007929363945550938, 0.032676486586826314, 0.0, 0.0, 0.0, 0.0, 0.004175763292184775, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003335912259372853, 0.0266316292986451, 0.0, 0.0, 0.0, 0.0009482626326038912, 0.08694066417869489, 0.0020530644693578237, 0.0], [0.0, 0.0, 0.0, 0.0006605574154216476, 0.02849572252441407, 0.0, 0.0, 0.0, 0.0, 0.0011708642415981796, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03166821612240017, 0.00026461800103988464, 0.0, 0.0, 0.0, 0.0020530644693578237, 0.0475047568480284, 0.0012011471472747615], [0.0, 0.0, 0.0, 0.0, 0.008068947959818884, 0.03377131332412736, 0.0, 0.0, 0.0, 0.0, 0.00435744864841936, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.003070810256326939, 0.0, 0.0, 0.0, 0.0, 0.0012011471472747615, 0.11106620112455949]]),
                True,
            ],
            [
                {(4, 5): 0.027027027027026973, (0, 4): -0.0025010484184897486, (0, 5): -0.0025010484184897486, (1, 3): 0.02702702702702703,
                 (4,): 0.9975113998006957, (5,): 0.9975113998006957, (0,): 0.07825142857142861, (1,): 0.0, (3,): 0.0},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "circuit_logical_off_boundary.stim"),
                np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0025010484184897486, 0.0, 0.0, 0.0, -0.0025010484184897486, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02702702702702703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.02702702702702703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0025010484184897486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027027027027026973, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0025010484184897486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027027027027026973, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]),
                False,
            ],
            [
                {(4, 5): 0.027027027027026973, (0, 4): -0.0025010484184897486, (0, 5): -0.0025010484184897486, (1, 3): 0.02702702702702703,
                 (4,): 0.9975113998006957, (5,): 0.9975113998006957, (0,): 0.07825142857142861, (1,): 0.0, (3,): 0.0},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "circuit_logical_off_boundary.stim"),
                np.array([[0.07825142857142861, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0025010484184897486, 0.0, 0.0, 0.0, -0.0025010484184897486, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.02702702702702703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                          [0.0, 0.0, 0.0, 0.0, 0.02702702702702703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0025010484184897486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9975113998006957, 0.0, 0.0, 0.0, 0.027027027027026973, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.0025010484184897486, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.027027027027026973, 0.0, 0.0, 0.0, 0.9975113998006957, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]),
                True,
            ],
            [
                {},
                stim.Circuit(),
                np.array([]),
                False,
            ],
            [
                {(4, 5): 0.1111111111111111, (1, 3): 0.1111111111111111, (0, 4): -0.0009910236625705338, (0, 5): -0.0009910236625705338,
                 (4,): 0.9990109367076823, (5,): 0.9990109367076823, (1,): 0.0, (3,): 0.0, (0,): 0.008771428571428624},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "unobservable_logical_rotated_mem_z_d3_r3.stim"),
                np.array([]),
                False,
            ]
        ]
    )
    def test_create_correlation_matrix_creates_valid_matrix_from_stim(self, pij_data, circuit, expected_matrix, plot_boundary_edges):
        pij_data = {frozenset(x): p for x, p in pij_data.items()}
        graph, _, _ = parse_stim_circuit(circuit)
        matrix, _ = create_correlation_matrix(
            pij_data, graph, plot_boundary_edges)
        npt.assert_array_equal(matrix, expected_matrix)

    # UserWarning occurs when circuit has no noise
    @pytest.mark.filterwarnings("ignore:Isolated logical observables:UserWarning")
    @pytest.mark.parametrize(
        "pij_data, circuit, expected_major_minor_mapping, plot_boundary_edges",
        [
            [
                {(4, 5): 0.03790345231176562, (5, 9): 0.002868529500751227, (19, 22): 0.00026461800103988464, (0, 7): 0.005653928489673998, (20, 21): 0.03732508255785305, (20, 23): 0.03377131332412736, (10, 14): 0.008048770793723514, (13, 16): 0.029471609130065857, (0, 4): 5.837840850303477e-05, (16, 19): 0.02849572252441407, (4, 7): 0.03391940293960499, (6, 7): 0.0025136844937678204, (5, 8): 0.030405150326564157, (5, 11): 0.0017414746364182165, (8, 11): 0.027984373755002068, (0, 6): 0.0021703933982749612, (2, 6): 0.008650733655094611, (10, 11): 0.031957510864608796, (16, 17): 0.0034586936869899776, (16, 23): 0.008068947959818884, (17, 21): 0.006330654381463907, (17, 23): 0.00435744864841936, (0, 3): 0.029459473033565553, (2, 3): 0.032492004339083114, (19, 23): 0.0012011471472747615, (15, 18): 0.0266316292986451, (12, 13): 0.03852901555238519, (12, 16): 0.002805042152225601, (9, 15): 0.004175763292184775, (7, 10): 0.02996865757262679, (4, 10): 0.0023681689647790383, (8, 14): 0.002172693153775329, (14, 18): 0.00212595310063618, (16, 20): 0.0021191286955135613, (12, 19): 0.0006605574154216476, (1, 7): 0.0029128413532241715, (9, 12): 6.645559185447514e-06, (18, 19): 0.03166821612240017, (1, 5): 0.006304565824739483, (8, 15): 0.007929363945550938, (1, 4): 0.0002694083680992998, (3, 7): 0.0001230841508201852, (0, 1): 0.0033969500102377093,
                 (18, 22): 0.007292298572883826, (12, 15): 0.032676486586826314, (3, 6): 3.130775328430424e-07, (6, 10): 0.001876040683835789, (8, 9): 0.0044617889726719095, (13, 17): 0.002332912100089124, (14, 15): 0.003335912259372853, (4, 8): 0.0015633121920086701, (22, 23): 0.003070810256326939, (7, 11): 0.0008974611451682546, (11, 15): 0.0009482626326038912, (15, 19): 0.0020530644693578237, (11, 14): 0.0010592278973130531, (16, 22): 0.002235768312187414, (17, 20): 0.00016621900521496258, (9, 13): 0.006808681993422827, (12, 18): 0.001967333588214215, (8, 12): 0.0012918472336771458, (13, 19): 0.0011708642415981796, (4, 11): 0.001051769393903057, (4,): 0.04551550723348229, (5,): 0.07559024781243702, (9,): 0.073647168255709, (2,): 0.10392065331006212, (19,): 0.0475047568480284, (22,): 0.0977406913084846, (6,): 0.0952234148782009, (21,): 0.10905870200243195, (0,): 0.1174505966134559, (7,): 0.08997803071302188, (20,): 0.04800572942775009, (23,): 0.11106620112455949, (10,): 0.07287127904108855, (13,): 0.07849661480645605, (14,): 0.09386030132845684, (16,): 0.08430965094219844, (18,): 0.07574656757873897, (8,): 0.08651894856083293, (11,): 0.049722477154960955, (1,): 0.07739937962679226, (3,): 0.05251452846159589, (17,): 0.0743670462989586, (15,): 0.08694066417869489, (12,): 0.045744965556093246},                lf("stim_circuit"),
                {(4.0, 7.0): [0, 4, 8, 12, 16, 20], (4.0, 9.0): [1, 5, 9, 13, 17, 21],
                 (6.0, 5.0): [2, 6, 10, 14, 18, 22], (6.0, 7.0): [3, 7, 11, 15, 19, 23]},
                False,
            ],
            [
                {(4, 5): 0.03790345231176562, (5, 9): 0.002868529500751227, (19, 22): 0.00026461800103988464, (0, 7): 0.005653928489673998, (20, 21): 0.03732508255785305, (20, 23): 0.03377131332412736, (10, 14): 0.008048770793723514, (13, 16): 0.029471609130065857, (0, 4): 5.837840850303477e-05, (16, 19): 0.02849572252441407, (4, 7): 0.03391940293960499, (6, 7): 0.0025136844937678204, (5, 8): 0.030405150326564157, (5, 11): 0.0017414746364182165, (8, 11): 0.027984373755002068, (0, 6): 0.0021703933982749612, (2, 6): 0.008650733655094611, (10, 11): 0.031957510864608796, (16, 17): 0.0034586936869899776, (16, 23): 0.008068947959818884, (17, 21): 0.006330654381463907, (17, 23): 0.00435744864841936, (0, 3): 0.029459473033565553, (2, 3): 0.032492004339083114, (19, 23): 0.0012011471472747615, (15, 18): 0.0266316292986451, (12, 13): 0.03852901555238519, (12, 16): 0.002805042152225601, (9, 15): 0.004175763292184775, (7, 10): 0.02996865757262679, (4, 10): 0.0023681689647790383, (8, 14): 0.002172693153775329, (14, 18): 0.00212595310063618, (16, 20): 0.0021191286955135613, (12, 19): 0.0006605574154216476, (1, 7): 0.0029128413532241715, (9, 12): 6.645559185447514e-06, (18, 19): 0.03166821612240017, (1, 5): 0.006304565824739483, (8, 15): 0.007929363945550938, (1, 4): 0.0002694083680992998, (3, 7): 0.0001230841508201852, (0, 1): 0.0033969500102377093,
                 (18, 22): 0.007292298572883826, (12, 15): 0.032676486586826314, (3, 6): 3.130775328430424e-07, (6, 10): 0.001876040683835789, (8, 9): 0.0044617889726719095, (13, 17): 0.002332912100089124, (14, 15): 0.003335912259372853, (4, 8): 0.0015633121920086701, (22, 23): 0.003070810256326939, (7, 11): 0.0008974611451682546, (11, 15): 0.0009482626326038912, (15, 19): 0.0020530644693578237, (11, 14): 0.0010592278973130531, (16, 22): 0.002235768312187414, (17, 20): 0.00016621900521496258, (9, 13): 0.006808681993422827, (12, 18): 0.001967333588214215, (8, 12): 0.0012918472336771458, (13, 19): 0.0011708642415981796, (4, 11): 0.001051769393903057, (4, 4): 0.04551550723348229, (5, 5): 0.07559024781243702, (9, 9): 0.073647168255709, (2, 2): 0.10392065331006212, (19, 19): 0.0475047568480284, (22, 22): 0.0977406913084846, (6, 6): 0.0952234148782009, (21, 21): 0.10905870200243195, (0, 0): 0.1174505966134559, (7, 7): 0.08997803071302188, (20, 20): 0.04800572942775009, (23, 23): 0.11106620112455949, (10, 10): 0.07287127904108855, (13, 13): 0.07849661480645605, (14, 14): 0.09386030132845684, (16, 16): 0.08430965094219844, (18, 18): 0.07574656757873897, (8, 8): 0.08651894856083293, (11, 11): 0.049722477154960955, (1, 1): 0.07739937962679226, (3, 3): 0.05251452846159589, (17, 17): 0.0743670462989586, (15, 15): 0.08694066417869489, (12, 12): 0.045744965556093246},                lf("stim_circuit"),
                {(4.0, 7.0): [0, 4, 8, 12, 16, 20], (4.0, 9.0): [1, 5, 9, 13, 17, 21],
                 (6.0, 5.0): [2, 6, 10, 14, 18, 22], (6.0, 7.0): [3, 7, 11, 15, 19, 23]},
                True,
            ],
            [
                {(4, 5): 0.027027027027026973, (0, 4): -0.0025010484184897486, (0, 5): -0.0025010484184897486, (1, 3): 0.02702702702702703,
                 (4,): 0.9975113998006957, (5,): 0.9975113998006957, (0,): 0.07825142857142861, (1,): 0.0, (3,): 0.0},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "circuit_logical_off_boundary.stim"),
                {(1.0, 0.0): [0, 6, 12, 18], (1.0, 2.0): [1, 7, 13, 19], (1.0, 4.0): [2, 8, 14, 20],
                 (3.0, 0.0): [3, 9, 15, 21], (3.0, 2.0): [4, 10, 16, 22], (3.0, 4.0): [5, 11, 17, 23]},
                False,
            ],
            [
                {(4, 5): 0.027027027027026973, (0, 4): -0.0025010484184897486, (0, 5): -0.0025010484184897486, (1, 3): 0.02702702702702703,
                 (4,): 0.9975113998006957, (5,): 0.9975113998006957, (0,): 0.07825142857142861, (1,): 0.0, (3,): 0.0},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "circuit_logical_off_boundary.stim"),
                {(1.0, 0.0): [0, 6, 12, 18], (1.0, 2.0): [1, 7, 13, 19], (1.0, 4.0): [2, 8, 14, 20],
                 (3.0, 0.0): [3, 9, 15, 21], (3.0, 2.0): [4, 10, 16, 22], (3.0, 4.0): [5, 11, 17, 23]},
                True,
            ],
            [
                {},
                stim.Circuit(),
                {},
                False,
            ],
            [
                {(4, 5): 0.1111111111111111, (1, 3): 0.1111111111111111, (0, 4): -0.0009910236625705338, (0, 5): -0.0009910236625705338,
                 (4,): 0.9990109367076823, (5,): 0.9990109367076823, (1,): 0.0, (3,): 0.0, (0,): 0.008771428571428624},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "unobservable_logical_rotated_mem_z_d3_r3.stim"),
                {},
                False,
            ]
        ]
    )
    def test_create_correlation_matrix_creates_valid_major_minor_mapping_from_stim(self, pij_data, circuit, expected_major_minor_mapping, plot_boundary_edges):
        pij_data = {frozenset(x): p for x, p in pij_data.items()}
        graph, _, _ = parse_stim_circuit(circuit)
        _, major_minor_mapping = create_correlation_matrix(
            pij_data, graph, plot_boundary_edges)
        assert major_minor_mapping == expected_major_minor_mapping

    @pytest.mark.parametrize(
        "pij_data, dem, expected_matrix",
        [
            [
                {},
                stim.DetectorErrorModel(""),
                np.array([]),
            ],
            [
                {(0, 0): 0.25, },
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "detector(1, 0, 0) D0",])),
                np.array([[0.0]]),
            ],
            [
                {(0, 0): 0.25, (1, 1): 0.25, (0, 1): 0.5},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.5) D0 D1",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1"])),
                np.array([[0.0, 0.5], [0.5, 0.0]]),
            ],
            [
                {(0, 0): 0.25, (1, 1): 0.25, (0, 1): 0.5},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.5) D0 D1",
                    "detector(1, 0, 0) D0",
                    "detector(1, 0, 0) D1"])),
                np.array([[0.0, 0.5], [0.5, 0.0]]),
            ],
            [
                {(0, 0): 0.25, (1, 1): 0.25, (2, 2): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (1, 2): 0.1},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.1) D1 D2",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1",
                    "detector(3, 0, 0) D2"])),
                np.array([[0.0, 0.2, 0.3], [0.2, 0.0, 0.1], [0.3, 0.1, 0.0]]),
            ],
            [
                {(0, 0): 0.25, (1, 1): 0.25, (2, 2): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (1, 2): 0.1},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.1) D1 D2",
                    "detector(1, 0, 0) D0",
                    "detector(1, 0, 0) D1",
                    "detector(1, 0, 0) D2"])),
                np.array([[0.0, 0.2, 0.3], [0.2, 0.0, 0.1], [0.3, 0.1, 0.0]]),
            ],
            [
                {(0, 0): 0.25, (1, 1): 0.25, (2, 2): 0.25, (3, 3): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (0, 3): 0.05, (1, 2): 0.1, (1, 3): 0.5, (2, 3): 0.35},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.25) D3",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.05) D0 D3",
                    "error(0.1) D1 D2",
                    "error(0.5) D1 D3",
                    "error(0.35) D2 D3",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1",
                    "detector(3, 0, 0) D2",
                    "detector(4, 0, 0) D3"])),
                np.array([[0.0, 0.2, 0.3, 0.05], [0.2, 0.0, 0.1, 0.5],
                          [0.3, 0.1, 0.0, 0.35], [0.05, 0.5, 0.35, 0.0]]),
            ],
            [
                {(0, 0): 0.25, (1, 1): 0.25, (2, 2): 0.25, (3, 3): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (0, 3): 0.05, (1, 2): 0.1, (1, 3): 0.5, (2, 3): 0.35},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.25) D3",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.05) D0 D3",
                    "error(0.1) D1 D2",
                    "error(0.5) D1 D3",
                    "error(0.35) D2 D3",
                    "detector(1, 0, 0) D0",
                    "detector(1, 0, 0) D1",
                    "detector(2, 0, 0) D2",
                    "detector(2, 0, 0) D3"])),
                np.array([[0.0, 0.2, 0.3, 0.05], [0.2, 0.0, 0.1, 0.5],
                          [0.3, 0.1, 0.0, 0.35], [0.05, 0.5, 0.35, 0.0]]),
            ],
        ]
    )
    def test_create_correlation_matrix_creates_valid_matrix_from_dem(self, pij_data, dem, expected_matrix):
        pij_data = {frozenset(x): p for x, p in pij_data.items()}
        graph, _ = dem_to_decoding_graph_and_logicals(dem)
        matrix, _ = create_correlation_matrix(pij_data, graph)
        npt.assert_array_equal(matrix, expected_matrix)

    @pytest.mark.parametrize(
        "pij_data, dem, expected_major_minor_mapping",
        [
            [
                {},
                stim.DetectorErrorModel(""),
                {}
            ],
            [
                {(0, 0): 0.25, },
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "detector(1, 0, 0) D0",])),
                {(1, 0): [0]}
            ],
            [
                {(0,): 0.25, (1,): 0.25, (0, 1): 0.5},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.5) D0 D1",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1"])),
                {(1, 0): [0], (2, 0): [1]}
            ],
            [
                {(0,): 0.25, (1,): 0.25, (0, 1): 0.5},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.5) D0 D1",
                    "detector(1, 0, 0) D0",
                    "detector(1, 0, 0) D1"])),
                {(1, 0): [0, 1]}
            ],
            [
                {(0,): 0.25, (1,): 0.25, (2,): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (1, 2): 0.1},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.1) D1 D2",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1",
                    "detector(3, 0, 0) D2"])),
                {(1, 0): [0], (2, 0): [1], (3, 0): [2]},
            ],
            [
                {(0,): 0.25, (1,): 0.25, (2,): 0.25,
                    (0, 1,): 0.2, (0, 2): 0.3, (1, 2): 0.1},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.1) D1 D2",
                    "detector(1, 0, 0) D0",
                    "detector(1, 0, 0) D1",
                    "detector(1, 0, 0) D2"])),
                {(1, 0): [0, 1, 2], },
            ],
            [
                {(0,): 0.25, (1,): 0.25, (2,): 0.25, (3,): 0.25, (0, 1): 0.2,
                 (0, 2): 0.3, (0, 3): 0.05, (1, 2): 0.1, (1, 3): 0.5, (2, 3): 0.35},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.25) D3",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.05) D0 D3",
                    "error(0.1) D1 D2",
                    "error(0.5) D1 D3",
                    "error(0.35) D2 D3",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1",
                    "detector(3, 0, 0) D2",
                    "detector(4, 0, 0) D3"])),
                {(1, 0): [0], (2, 0): [1], (3, 0): [2], (4, 0): [3]}
            ],
            [
                {(0,): 0.25, (1,): 0.25, (2,): 0.25, (3,): 0.25, (0, 1): 0.2,
                 (0, 2): 0.3, (0, 3): 0.05, (1, 2): 0.1, (1, 3): 0.5, (2, 3): 0.35},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.25) D3",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.05) D0 D3",
                    "error(0.1) D1 D2",
                    "error(0.5) D1 D3",
                    "error(0.35) D2 D3",
                    "detector(1, 0, 0) D0",
                    "detector(1, 0, 0) D1",
                    "detector(2, 0, 0) D2",
                    "detector(2, 0, 0) D3"])),
                {(1, 0): [0, 1], (2, 0): [2, 3]}
            ],
        ]
    )
    def test_create_correlation_matrix_creates_correct_major_minor_mapping_from_dem(self, pij_data, dem, expected_major_minor_mapping):
        pij_data = {frozenset(x): p for x, p in pij_data.items()}
        graph, _ = dem_to_decoding_graph_and_logicals(dem)
        _, major_minor_mapping = create_correlation_matrix(pij_data, graph)
        assert major_minor_mapping == expected_major_minor_mapping

    @pytest.mark.parametrize(
        "pij_data, dem",
        [
            [
                {(0,): 0.25, },
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "detector(1, 0, 0) D0",])),
            ],
            [
                {(0,): 0.25, (1,): 0.25, (0, 1): 0.5},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.5) D0 D1",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1"])),
            ],
            [
                {(0,): 0.25, (1,): 0.25, (2,): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (1, 2): 0.1},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.1) D1 D2",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1",
                    "detector(3, 0, 0) D2"])),
            ],
            [
                {(0,): 0.25, (1,): 0.25, (2,): 0.25, (3,): 0.25,
                 (0, 1): 0.2, (0, 2): 0.3, (0, 3): 0.05, (1, 2): 0.1, (1, 3): 0.5, (2, 3): 0.35},
                stim.DetectorErrorModel("\n".join([
                    "error(0.25) D0",
                    "error(0.25) D1",
                    "error(0.25) D2",
                    "error(0.25) D3",
                    "error(0.2) D0 D1",
                    "error(0.3) D0 D2",
                    "error(0.05) D0 D3",
                    "error(0.1) D1 D2",
                    "error(0.5) D1 D3",
                    "error(0.35) D2 D3",
                    "detector(1, 0, 0) D0",
                    "detector(2, 0, 0) D1",
                    "detector(3, 0, 0) D2",
                    "detector(4, 0, 0) D3"])),
            ],
        ]
    )
    def test_create_correlation_matrix_plots_boundaries_only_if_plot_boundary_edges_true(self, pij_data, dem):
        pij_data = {frozenset(x): p for x, p in pij_data.items()}
        graph, _ = dem_to_decoding_graph_and_logicals(dem)
        matrix, _ = create_correlation_matrix(
            pij_data, graph, plot_boundary_edges=True)
        npt.assert_(np.all(np.diag(matrix) != 0))

    @pytest.mark.parametrize(
        "pij_data, stim_circuit",
        [
            [
                {(4, 5): 0.006535947712418277, (0, 4): -0.010214846916035358, (0, 5): -0.010214846916035358, (1, 3): 0.006535947712418333,
                 (4,): 0.989989661239987, (5,): 0.989989661239987, (0,): 0.37974039735099335, (1,): -3.251744899835995e-17, (3,): -3.251744899835995e-17},
                stim.Circuit.from_file(REFERENCE_DATA_DIR / "stim" /
                                       "circuit_multi_logicals.stim"),
            ],
        ]
    )
    def test_create_correlation_matrix_raises_value_error_if_time_steps_unequal(self, pij_data, stim_circuit):
        pij_data = {frozenset(x): p for x, p in pij_data.items()}
        graph, _, _ = parse_stim_circuit(stim_circuit)
        with pytest.raises(expected_exception=ValueError, match=r"Inconsistent qubit time mapping"):
            create_correlation_matrix(pij_data, graph)

    @pytest.mark.parametrize(
        "num_processes",
        [
            0,
            -2,
            -3,
            -10,
        ]
    )
    def test_generate_expectation_values_raises_warning_if_num_processes_0_or_less_than_negative_1(self, num_processes):
        with pytest.warns(UserWarning, match=r"num_processes 0 or < -1, falling back to using single process."):
            generate_expectation_data([], num_processes=num_processes)

    @pytest.mark.parametrize(
        "num_processes",
        [
            -1,
            1,
            2,
            3,
            4,
        ]
    )
    def test_generate_expectation_values_raises_no_warning_if_num_processes_not_0_or_less_than_negative_1(self, num_processes):
        with warnings.catch_warnings():
            warnings.simplefilter("error")
            generate_expectation_data([], num_processes=num_processes)
